package mpkpk.project.hotel;

import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.sql.*;

public class FacadeReservation
{
    String dbName = "hotel";

    private Connection conn = connectToDatabase(dbName);
    private Statement stat;
	
	ArrayList<Client> clients; // List of clients
	ArrayList<Reservation> reservations; // List of reservations
	ArrayList<Room> rooms; // List of rooms
	
	public FacadeReservation(ArrayList<Client> clients, ArrayList<Reservation> reservations, ArrayList<Room> rooms)
	{
		this.clients = clients;
		this.reservations = reservations;
		this.rooms = rooms;
		
        try 
        {
            stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT * FROM CLIENTS");
            int id, phoneNumber;
            String firstName, lastName;
            while(result.next()) 
            {
                id = result.getInt("ID");
                firstName = result.getString("FIRSTNAME");
                lastName = result.getString("LASTNAME");
                phoneNumber = Integer.parseInt(result.getString("PHONE"));
                
                clients.add(new Client(id, firstName, lastName, phoneNumber));
            }
        }
        catch (SQLException e) 
        {
            e.printStackTrace();
        }
        
        try 
        {
            stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT * FROM ROOMS");
            int id, capacity, isVip;
            while(result.next()) 
            {
                id = result.getInt("ID");
                capacity = result.getInt("CAPACITY");
                isVip = result.getInt("ISVIP");
                
                if (isVip == 0) 
                {
					if (capacity == 1) 
					{
						rooms.add(new SingleRoom(id, new NormalRoom(new BareRoom())));
					}
					else if (capacity == 2)
					{
						rooms.add(new DoubleRoom(id, new NormalRoom(new BareRoom())));	
					}		
					else if (capacity == 3)
					{
						rooms.add(new TripleRoom(id, new NormalRoom(new BareRoom())));
					}	
					else if (capacity == 4)
					{
						rooms.add(new QuadrupleRoom(id, new NormalRoom(new BareRoom())));
					}
				}
                else if(isVip == 1)
                {
					if (capacity == 1) 
					{
						rooms.add(new SingleRoom(id, new VipRoom(new BareRoom())));
					}
					else if (capacity == 2)
					{
						rooms.add(new DoubleRoom(id, new VipRoom(new BareRoom())));	
					}		
					else if (capacity == 3)
					{
						rooms.add(new TripleRoom(id, new VipRoom(new BareRoom())));
					}	
					else if (capacity == 4)
					{
						rooms.add(new QuadrupleRoom(id, new VipRoom(new BareRoom())));
					}
                }
            }
        } 
        catch (SQLException e) 
        {
            e.printStackTrace();
        } 
        
        try 
        {
            stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT * FROM RESERVATIONS");
            int id, phoneNumber;
            String firstName, lastName;
            while(result.next()) 
            {
                id = result.getInt("ID");
                firstName = result.getString("FIRSTNAME");
                lastName = result.getString("LASTNAME");
                phoneNumber = Integer.parseInt(result.getString("PHONE"));
                
                clients.add(new Client(id, firstName, lastName, phoneNumber));
            	
            	// TODO
            }
        } 
        catch (SQLException e) 
        {
            e.printStackTrace();
        }
        
        
        
        
		System.out.println("DONE");
		
	}
	
	public void AddReservation(Date from, Date to, Client client, int numberOfPeople, Room room)
	{
		try 
		{
			room.SetNumberOfClients(numberOfPeople);
			reservations.add(new Reservation(from, to, client, room));
			
			// TODO Add to database
		} 
		catch (Exception e) 
		{
			
		}
	}
	public ArrayList<Room> FindEmptyRooms(Date from, Date to, int capacity)
	{
		ArrayList<Room> ret = new ArrayList<Room>();

		for(Room item: rooms)
		{
			if (item.GetCapacity() >= capacity && !item.IsOccupied()) 
			{
				ret.add(item);
			}
		}
	
		return ret;
	}
	public ArrayList<Room> ListAllRooms()
	{
		return rooms;
	}
	public ArrayList<Reservation> ListaAllReservation()
	{
		return reservations;
	}
	public ArrayList<Client> ListAllClients()
	{
		return clients;
	}
	
     static Connection connectToDatabase(String dbName) 
     {
        Connection conn = null;
        try 
        {
            Class.forName("org.sqlite.JDBC");           
            conn = DriverManager.getConnection("jdbc:sqlite:"+dbName+".sqlite");
            //System.out.println("Po³¹czy³em siê z baz¹ "+dbName);
        } 
        catch (Exception e)
        {
            System.err.println("B³¹d w po³¹czeniu z baz¹: \n" + e.getMessage());
            return null;
        }
        return conn;
    }
}
